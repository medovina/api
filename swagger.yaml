swagger: '2.0'
host: URL
basePath: "/v1"
consumes:
- application/json
produces:
- application/json
schemes:
- https
securityDefinitions:
  oauth_2_0_undefined:
    authorizationUrl: ''
    description: 'ReCodEx supports OAuth 2.0 for authenticating API requests.'
    scopes: {}
    tokenUrl: https://api.recodex.org/v1/oauth2/token
    type: oauth2

info:
  title: ReCodEx REST API
  version: v1
  description:

tags:
  - name: assignment
    description: Exercise assignment endpoints
  - name: exercises
    description: Exercise endpoints

paths:

# EXERCISE ASSIGNMENTS
  "/assignments":
    get:
      tags:
        - assignment
      description: The list of all assignments througout the history of ReCodEx.
      parameters:
      - description: A valid admin's token must be transfered this way.
        in: header
        name: Authorization
        type: string
      responses:
        200:
          description: List of all assignments
          schema:
            type: object
            allOf:
              - $ref: "#/responses/DefaultResponseParams"
              - properties:
                  payload:
                    $ref: "#/definitions/Assignments"
        400:
          $ref: "#/responses/BadRequestResponse"
        403:
          $ref: "#/responses/ForbiddenResponse"
    post:
      tags:
        - assignment
      description: Create a new assignment.
  "/assignments/{assignmentId}":
    delete:
      tags:
        - assignment
      description: Remove an assignment.
      parameters:
      - in: path
        name: assignmentId
        required: true
        type: string
    get:
      tags:
        - assignment
      description: Get details of an assignment.
      parameters:
      - in: path
        name: assignmentId
        required: true
        type: string
    put:
      tags:
        - assignment
      description: Edit assignment settings.
      parameters:
      - in: path
        name: assignmentId
        required: true
        type: string
  "/assignments/{assignmentId}/configuration":
    get:
      tags:
        - assignment
      description: The list of all specific configurations.
      parameters:
      - in: path
        name: assignmentId
        required: true
        type: string
    post:
      tags:
        - assignment
      description: Create new configuration.
      parameters:
      - in: path
        name: assignmentId
        required: true
        type: string
  "/assignments/{assignmentId}/configuration/{configurationId}":
    delete:
      tags:
        - assignment
      description: Delete unnecessary configuration.
      parameters:
      - in: path
        name: assignmentId
        required: true
        type: string
      - in: path
        name: configurationId
        required: true
        type: string
    get:
      tags:
        - assignment
      description: Get details of the configuration.
      parameters:
      - in: path
        name: assignmentId
        required: true
        type: string
      - in: path
        name: configurationId
        required: true
        type: string
    put:
      tags:
        - assignment
      description: Change the configuration.
      parameters:
      - in: path
        name: assignmentId
        required: true
        type: string
      - in: path
        name: configurationId
        required: true
        type: string
  "/assignments/{assignmentId}/instructions":
    get:
      tags:
        - assignment
      description: |
        Get the list of all available language variants of
        the instructions and the instructions in the default language.
      parameters:
      - in: path
        name: assignmentId
        required: true
        type: string
    post:
      tags:
        - assignment
      description: Create instructions in a different language.
      parameters:
      - in: path
        name: assignmentId
        required: true
        type: string
  "/assignments/{assignmentId}/instructions/{lang}":
    delete:
      tags:
        - assignment
      description: Delete instructions in a specific language.
      parameters:
      - in: path
        name: assignmentId
        required: true
        type: string
      - in: path
        name: lang
        required: true
        type: string
    get:
      tags:
        - assignment
      description: Get instructions for the exercise in a specific language.
      parameters:
      - in: path
        name: assignmentId
        required: true
        type: string
      - in: path
        name: lang
        required: true
        type: string
    put:
      tags:
        - assignment
      description: Edit the instructions.
      parameters:
      - in: path
        name: assignmentId
        required: true
        type: string
      - in: path
        name: lang
        required: true
        type: string
  "/assignments/{assignmentId}/submissions":
    get:
      tags:
        - assignment
      description: The list of all submissions for this assignment.
      parameters:
      - in: path
        name: assignmentId
        required: true
        type: string

# EXERCISES
  "/exercises":
    get:
      tags:
        - exercises
      description: Get list of all available exercises.
    post:
      tags:
        - exercises
      description: Create new exercise.
  "/exercises/{exerciseId}":
    delete:
      tags:
        - exercises
      description: Delete an unncessary exercise.
      parameters:
      - in: path
        name: exerciseId
        required: true
        type: string
    get:
      tags:
        - exercises
      description: Detailed information about an exercise.
      parameters:
      - in: path
        name: exerciseId
        required: true
        type: string
  "/exercises/{exerciseId}/configuration":
    get:
      tags:
        - exercises
      description: The list of all specific configurations.
      parameters:
      - in: path
        name: exerciseId
        required: true
        type: string
    post:
      tags:
        - exercises
      description: Create new configuration.
      parameters:
      - in: path
        name: exerciseId
        required: true
        type: string
  "/exercises/{exerciseId}/configuration/automatic":
    get:
      tags:
        - exercises
      description: |
        List of all performed auto-configuration throughout the whole
        lifespan of the exercise.
      parameters:
      - in: path
        name: exerciseId
        required: true
        type: string
    post:
      tags:
        - exercises
      description: Perform new auto-configuration.
      parameters:
      - in: path
        name: exerciseId
        required: true
        type: string
  "/exercises/{exerciseId}/configuration/automatic/{automaticConfigurationId}":
    delete:
      tags:
        - exercises
      description: Remove unnecessary autoconfiguration log.
      parameters:
      - in: path
        name: exerciseId
        required: true
        type: string
      - in: path
        name: automaticConfigurationId
        required: true
        type: string
    get:
      tags:
        - exercises
      description: Auto-configuration results.
      parameters:
      - in: path
        name: exerciseId
        required: true
        type: string
      - in: path
        name: automaticConfigurationId
        required: true
        type: string
  "/exercises/{exerciseId}/configuration/{configurationId}":
    delete:
      tags:
        - exercises
      description: Delete unnecessary configuration.
      parameters:
      - in: path
        name: exerciseId
        required: true
        type: string
      - in: path
        name: configurationId
        required: true
        type: string
    get:
      tags:
        - exercises
      description: Get details of the configuration.
      parameters:
      - in: path
        name: exerciseId
        required: true
        type: string
      - in: path
        name: configurationId
        required: true
        type: string
    put:
      tags:
        - exercises
      description: Change the configuration.
      parameters:
      - in: path
        name: exerciseId
        required: true
        type: string
      - in: path
        name: configurationId
        required: true
        type: string
  "/exercises/{exerciseId}/instructions":
    get:
      tags:
        - exercises
      description: |
        Get the list of all available language variants of
        the instructions and the instructions in the default language.
      parameters:
      - in: path
        name: exerciseId
        required: true
        type: string
    post:
      tags:
        - exercises
      description: Create instructions in a different language.
      parameters:
      - in: path
        name: exerciseId
        required: true
        type: string
  "/exercises/{exerciseId}/instructions/{lang}":
    delete:
      tags:
        - exercises
      description: Delete instructions in a specific language.
      parameters:
      - in: path
        name: exerciseId
        required: true
        type: string
      - in: path
        name: lang
        required: true
        type: string
    get:
      tags:
        - exercises
      description: Get instructions for the exercise in a specific language.
      parameters:
      - in: path
        name: exerciseId
        required: true
        type: string
      - in: path
        name: lang
        required: true
        type: string
    put:
      tags:
        - exercises
      description: Edit the instructions.
      parameters:
      - in: path
        name: exerciseId
        required: true
        type: string
      - in: path
        name: lang
        required: true
        type: string
  "/exercises/{exerciseId}/sample-solutions":
    get:
      tags:
        - exercises
      description: The list of submitted sample solutions.
      parameters:
      - in: path
        name: exerciseId
        required: true
        type: string
    post:
      tags:
        - exercises
      description: Submit new sample solution.
      parameters:
      - in: path
        name: exerciseId
        required: true
        type: string
  "/exercises/{exerciseId}/sample-solutions/{sampleSolutionId}":
    delete:
      tags:
        - exercises
      description: Remove unnecessary sample solution.
      parameters:
      - in: path
        name: exerciseId
        required: true
        type: string
      - in: path
        name: sampleSolutionId
        required: true
        type: string
    get:
      tags:
        - exercises
      description: Information about a sample solutoon.
      parameters:
      - in: path
        name: exerciseId
        required: true
        type: string
      - in: path
        name: sampleSolutionId
        required: true
        type: string
    put:
      tags:
        - exercises
      description: Update information about a sample solution.
      parameters:
      - in: path
        name: exerciseId
        required: true
        type: string
      - in: path
        name: sampleSolutionId
        required: true
        type: string

# GROUPS
  "/groups":
    get:
      tags:
        - groups
      description: Get the list of all groups
      parameters:
      - description: Get only groups of the instance with given
        in: query
        name: instanceId
        required: false
        type: string
    post:
      tags:
        - groups
      description: Create new group
      parameters:
      - in: query
        name: name
        type: string
      - in: query
        name: instanceId
        type: string
      - in: query
        name: externalId
        type: string
      - in: query
        name: parentGroupId
        type: string
  "/groups/{groupId}":
    delete:
      tags:
        - groups
      description: Delete group
      parameters:
      - in: path
        name: groupId
        required: true
        type: string
    get:
      tags:
        - groups
      description: Get the group details
      parameters:
      - in: path
        name: groupId
        required: true
        type: string
    put:
      tags:
        - groups
      description: Update the group details
      parameters:
      - in: path
        name: groupId
        required: true
        type: string
  "/groups/{groupId}/users":
    get:
      tags:
        - groups
      description: Get all users of the group
      parameters:
      - in: path
        name: groupId
        required: true
        type: string
    post:
      tags:
        - groups
      description: Add user to the group
      parameters:
      - in: path
        name: groupId
        required: true
        type: string
  "/groups/{groupId}/users/{userId}":
    delete:
      tags:
        - groups
      description: Remove user from the group
      parameters:
      - in: path
        name: groupId
        required: true
        type: string
      - in: path
        name: userId
        required: true
        type: string
    put:
      tags:
        - groups
      description: Update the role of the user in a group
      parameters:
      - in: path
        name: groupId
        required: true
        type: string
      - in: path
        name: userId
        required: true
        type: string

# INSTANCES
  "/instances":
    get:
      tags:
        - instances
      description: Get the list of all instances
      parameters:
#      - description: Get only valid or invalid instances
#        in: query
#        name: valid
#        required: false
#        type: boolean
#      - description: Get only instances with given language
#        in: query
#        maxLength: 2
#        minLength: 2
#        name: language
#        required: false
#        type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            allOf:
              - $ref: "#/responses/DefaultResponseParams"
              - properties:
                  payload:
                    $ref: "#/definitions/Instances"
        400:
          $ref: "#/responses/BadRequestResponse"
        403:
          $ref: "#/responses/ForbiddenResponse"
    post:
      tags:
        - instances
      description: Create a new instance for a separate institution
      parameters:
      - name: name
        description: Name of the instance
        in: query
        type: string
      - name: description
        description: Description of the instance (shown in the instance detail)
        in: query
        type: string
      - name: isOpen
        description: Owner of the instance
        in: query
        type: boolean
#      - name: language
#        description: Default app language of the instance specified by the two letter
#          standard [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1)
#        in: query
#        maxLength: 2
#        minLength: 2
#        type: string
      responses:
        201:
          description: Created
          schema:
            type: object
            allOf:
              - $ref: "#/responses/CreatedResponseParams"
              - properties:
                  payload:
                    $ref: "#/definitions/Instance"
        400:
          $ref: "#/responses/BadRequestResponse"
        403:
          $ref: "#/responses/ForbiddenResponse"
  "/instances/{instanceId}":
    delete:
      tags:
        - instances
      description: Delete the instance and its groups
      parameters:
      - in: path
        name: instanceId
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/DeleteResponse"
        400:
          $ref: "#/responses/BadRequestResponse"
        403:
          $ref: "#/responses/ForbiddenResponse"
    get:
      tags:
        - instances
      description: Get the instance details
      parameters:
      - in: path
        name: instanceId
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            allOf:
              - $ref: "#/responses/DefaultResponseParams"
              - properties:
                  payload:
                    $ref: "#/definitions/Instance"
        400:
          $ref: "#/responses/BadRequestResponse"
        403:
          $ref: "#/responses/ForbiddenResponse"
    put:
      tags:
        - instances
      description: Update the instance details
      parameters:
      - in: path
        name: instanceId
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            allOf:
              - $ref: "#/responses/DefaultResponseParams"
              - properties:
                  payload:
                    $ref: "#/definitions/Instance"
        400:
          $ref: "#/responses/BadRequestResponse"
        403:
          $ref: "#/responses/ForbiddenResponse"
  "/instances/{instanceId}/groups":
    get:
      tags:
        - instances
      description: Get the list of all groups of the instance
      parameters:
      - in: path
        name: instanceId
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            allOf:
              - $ref: "#/responses/DefaultResponseParams"
              - properties:
                  payload:
                    $ref: "#/definitions/Groups"
        400:
          $ref: "#/responses/BadRequestResponse"
        403:
          $ref: "#/responses/ForbiddenResponse"
  "/instances/{instanceId}/licences":
    get:
      tags:
        - instances
      description: Get the list of all licences of the instance
      parameters:
      - in: path
        name: instanceId
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            allOf:
              - $ref: "#/responses/DefaultResponseParams"
              - properties:
                  payload:
                    $ref: "#/definitions/Licences"
        400:
          $ref: "#/responses/BadRequestResponse"
        403:
          $ref: "#/responses/ForbiddenResponse"
    post:
      tags:
        - instances
      description: Add a new licence to the instance
      parameters:
      - in: path
        name: instanceId
        required: true
        type: string
      responses:
        201:
          description: Created
          schema:
            type: object
            allOf:
              - $ref: "#/responses/CreatedResponseParams"
              - properties:
                  payload:
                    $ref: "#/definitions/Licence"
        400:
          $ref: "#/responses/BadRequestResponse"
        403:
          $ref: "#/responses/ForbiddenResponse"
  "/instances/{instanceId}/licences/{licenceId}":
    delete:
      tags:
        - instances
      description: Delete the given licence of the instance
      parameters:
      - in: path
        name: instanceId
        required: true
        type: string
      - in: path
        name: licenceId
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/DeleteResponse"
        400:
          $ref: "#/responses/BadRequestResponse"
        403:
          $ref: "#/responses/ForbiddenResponse"
    put:
      tags:
        - instances
      description: Update the given licence of the instance
      parameters:
      - in: path
        name: instanceId
        required: true
        type: string
      - in: path
        name: licenceId
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            allOf:
              - $ref: "#/responses/DefaultResponseParams"
              - properties:
                  payload:
                    $ref: "#/definitions/Licence"
        400:
          $ref: "#/responses/BadRequestResponse"
        403:
          $ref: "#/responses/ForbiddenResponse"

# SUBMISSIONS
  "/submissions":
    get:
      tags:
        - submissions
      description: The list of all submissions throughout the application.
  "/submissions/{submissionId}":
    delete:
      tags:
        - submissions
      description: Remove an unncessary submission.
      parameters:
      - in: path
        name: submissionId
        required: true
        type: string
      - description: A valid admin's token must be transfered this way.
        in: header
        name: Authorization
        type: string
    get:
      tags:
        - submissions
      description: Details of the specific submission.
      parameters:
      - in: path
        name: submissionId
        required: true
        type: string
  "/submissions/{submissionId}/evaluation":
    get:
      tags:
        - submissions
      description: The evaluation of the submission.
      parameters:
      - in: path
        name: submissionId
        required: true
        type: string
    post:
      tags:
        - submissions
      description: Publish the evaluation results of the submission.
      parameters:
      - in: path
        name: submissionId
        required: true
        type: string
  "/tags":
    delete:
      tags:
        - submissions
    get:
      tags:
        - submissions
    post:
      tags:
        - submissions


# USERS
  "/users":
    get:
      tags:
        - users
      description: Get the list of all users.
    put:
      tags:
        - users
      description: |
        Create new ReCodEx account or bind an existing account with
        another authentication service.
  "/users/{userId}":
    delete:
      tags:
        - users
      description: Close user's account.
      parameters:
      - in: path
        name: userId
        required: true
        type: string
    get:
      tags:
        - users
      description: Get details of a specific user.
      parameters:
      - in: path
        name: userId
        required: true
        type: string
      responses:
        '200':
          description: The user's profile details.
    put:
      tags:
        - users
      description: Update user's personal information.
      parameters:
      - in: path
        name: userId
        required: true
        type: string
  "/users/{userId}/assignments":
    get:
      tags:
        - users
      description: The list of assignments for the user accross all groups.
      parameters:
      - in: path
        name: userId
        required: true
        type: string
  "/users/{userId}/groups":
    get:
      tags:
        - users
      description: The list of groups into which the user belongs.
      parameters:
      - in: path
        name: userId
        required: true
        type: string
  "/users/{userId}/log":
    get:
      tags:
        - users
      description: Get the history of user's activities.
      parameters:
      - in: path
        name: userId
        required: true
        type: string
  "/users/{userId}/logins":
    get:
      tags:
        - users
      description: Get the list of user's authentication methods.
      parameters:
      - in: path
        name: userId
        required: true
        type: string
  "/users/{userId}/logins/{loginId}":
    delete:
      tags:
        - users
      description: Disable an authentication method.
      parameters:
      - in: path
        name: userId
        required: true
        type: string
      - in: path
        name: loginId
        required: true
        type: string
    put:
      tags:
        - users
      description: Enable or disable an authentication method.
      parameters:
      - in: path
        name: userId
        required: true
        type: string
      - in: path
        name: loginId
        required: true
        type: string
  "/users/{userId}/settings":
    get:
      tags:
        - users
      description: Get user's current settings.
      parameters:
      - in: path
        name: userId
        required: true
        type: string
    put:
      tags:
        - users
      description: Change the settings of the user.
      parameters:
      - in: path
        name: userId
        required: true
        type: string
  "/users/{userId}/submissions":
    get:
      tags:
        - users
      description: The history of user's assignments' submissions.
      parameters:
      - in: path
        name: userId
        required: true
        type: string

responses:
  DefaultResponseParams:
    properties:
      code:
        type: integer
        required: true
        example: 200
      success:
        type: boolean
        required: true
        example: true

  SuccessResponse:
    description: Success
    schema:
      type: object
      allOf:
        - $ref: "#/responses/DefaultResponseParams"

  CreatedResponseParams:
    properties:
      code:
        type: integer
        required: true
        example: 201
      success:
        type: boolean
        required: true
        example: true

  DeleteResponse:
    description: OK
    schema:
      properties:
        code:
          type: integer
          required: true
        success:
          type: boolean
          required: true
        payload:
          type: array
          description: Empty array
          items:
            type: boolean
      example:
        code: 200
        success: true
        payload: []

  DefaultErrorParams:
    type: object
    allOf:
      - $ref: "#/responses/DefaultResponseParams"
      - properties:
          msg:
            type: string
            required: true

  ForbiddenResponse:
    description: Forbidden Request - Access denied
    schema:
      type: object
      allOf:
        - $ref: "#/responses/DefaultErrorParams"
      example:
        msg: Forbidden Request - Access denied
        code: 403
        success: false

  BadRequestResponse:
    description: Bad Request
    schema:
      type: object
      allOf:
        - $ref: "#/responses/DefaultErrorParams"
      example:
        msg: Bad Request - Missing required POST field
        code: 400
        success: false

definitions:
  Assignment:
    type: object
    properties:
      id:
        type: string
        format: guid
        example: 04df8d5f-63d9-11e6-8691-0026b9b15f19
      name:
        type: string
        example: Solve P?=NP
      isPublic:
        type: boolean
        example: true
      description:
        type: string
        example: It's time to crack this one already
      groupId:
        $ref: "#/definitions/Group/properties/id"
      deadline:
        type: object
        properties:
          first:
            type: integer
            example: 1476390421
          second:
            type: integer
            example: 1476490421
      submissionsCountLimit:
        type: integer
        example: 10
      canReceiveSubmissions:
        type: boolean
        example: false

  Assignments:
    type: array
    items:
      $ref: "#/definitions/Assignment"

  Group:
    type: object
    properties:
      id:
        type: string
        format: guid
        example: 04df8d5f-63d9-11e6-8691-0026b9b15f19

  Groups:
    type: array
    items:
      $ref: "#/definitions/Group"

  Instance:
    type: object
    properties:
      id:
        type: string
        format: guid
        example: 04df8d5f-63d9-11e6-8691-0026b9b15f19
      name:
        type: string
        example: Frankenstein University, Atlantida
      description:
        type: string
        example: First underwater IT university for fish and shrimps.
      hasValidLicence:
        type: boolean
      isOpen:
        type: boolean
      createdAt:
        type: integer
        format: int64
        description: UNIX timestamp
        example: 1471369442
      updatedAt:
        type: integer
        format: int64
        description: UNIX timestamp
        example: 1471369442
      admin:
        $ref: "#/definitions/User"
      topLevelGroups:
        type: array
        items:
          $ref: "#/definitions/Group"     

  Instances:
    type: array
    items:
      $ref: "#/definitions/Instance"

  Licence:
    type: object
    properties:
      id:
        type: string
        format: guid
        example: fc4b5928-62fd-11e6-8fc3-0026b9b15f19
      note:
        type: string
        example: Year licence for the first Fish University
      isValid:
        type: boolean
        example: true
      valideUntil:
        type: integer
        format: int64
        description: UNIX timestamp
        example: 2039535811

  Licences:
    type: array
    items:
      $ref: "#/definitions/Licence"

  User:
    type: object
    properties:
      id:
        type: string
        format: guid
        example: fc4b5928-62fd-11e6-8fc3-0026b9b15f19
      fullName:
        type: string
        example: RNDr. Octavianus Black, MBA
      name:
        type: object
        properties:
          degreesBeforeName:
            type: string
            example: RNDr.
          firstName:
            type: string
            example: Octavianus
          lastName:
            type: string
            example: Black
          degreesAfterName:
            type: string
            example: MBA
      instanceId:
        type: string
        format: guid
        example: 04df8d5f-63d9-11e6-8691-0026b9b15f19
      avatarUrl:
        type: string
        example: https://www.gravatar.com/avatar/203a57823b5139ba3a967980fe0a2b66?s=328&d=identicon&r=PG
      isVerified:
        description: Is the user verified by email?
        type: boolean
      role:
        type: string
        example: admin
      groups:
        type: object
        properties:
          studentOf:
            type: array
            items:
              $ref: "#/definitions/Group"
          supervisorOf:
            type: array
            items:
              $ref: "#/definitions/Group"
