swagger: '2.0'
host: recodex.projekty.ms.mff.cuni.cz
basePath: /v1
consumes:
  - application/json
produces:
  - application/json
schemes:
  - https
securityDefinitions:
  WebToken:
    type: apiKey
    in: header
    name: Authorization
  BackendAuth:
    type: basic
info:
  title: 'ReCodEx REST API'
  version: v1
  description: null
tags:
  -
    name: exercises
    description: 'Endpoint for exercise manipulation'
  -
    name: broker-reports
    description: 'Endpoints used by the backend to notify the frontend of errors and changes in job status'
  -
    name: login
    description: 'Endpoints used to log a user in'
  -
    name: comments
    description: 'Endpoints for comment manipulation'
  -
    name: assignments
    description: 'Endpoints for exercise assignment manipulation'
  -
    name: groups
    description: 'Endpoints for group manipulation'
  -
    name: instances
    description: 'Endpoints for instance manipulation'
  -
    name: reference-exercise-solutions
    description: 'Endpoints for manipulation of reference solutions of exercises'
  -
    name: submissions
    description: 'Endpoints for manipulation of solution submissions'
  -
    name: uploaded-files
    description: 'Endpoints for management of uploaded files'
  -
    name: users
    description: 'User management endpoints'
  -
    name: forgotten-password
    description: 'Endpoints associated with resetting forgotten passwords'
paths:
  /login:
    post:
      description: 'Log in using user credentials'
      parameters:
        -
          name: username
          required: false
          type: email
          in: formData
          description: 'User''s E-mail'
        -
          name: password
          required: false
          type: string
          in: formData
          description: Password
      responses:
        200: {  }
      tags:
        - login
  /login/refresh:
    post:
      description: 'Refresh the access token of current user'
      parameters: [ ]
      responses:
        200: {  }
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - login
      security:
        WebToken: [ ]
  '/login/{serviceId}':
    post:
      description: 'Log in using an external authentication service'
      parameters:
        -
          name: username
          required: false
          type: string
          in: formData
          description: 'User name'
        -
          name: password
          required: false
          type: string
          in: formData
          description: Password
        -
          name: serviceId
          required: true
          in: path
          type: string
      responses:
        200: {  }
      tags:
        - login
  '/comments/{id}':
    get:
      description: 'Get a comment thread'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200: {  }
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - comments
      security:
        WebToken: [ ]
    post:
      description: 'Add a comment to a thread'
      parameters:
        -
          name: text
          required: false
          type: 'string:1..'
          in: formData
          description: 'Text of the comment'
        -
          name: isPrivate
          required: false
          type: string
          in: formData
          description: 'True if the comment is private'
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200: {  }
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - comments
      security:
        WebToken: [ ]
  '/comments/{threadId}/comment/{commentId}/toggle':
    post:
      description: 'Make a private comment public or vice versa'
      parameters:
        -
          name: threadId
          required: true
          in: path
          type: string
        -
          name: commentId
          required: true
          in: path
          type: string
      responses:
        200: {  }
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - comments
      security:
        WebToken: [ ]
  /broker-reports/error:
    post:
      tags:
        - broker-reports
      description: 'Announce a backend error that is not related to any job (meant to be called by the backend)'
      parameters:
        -
          name: message
          required: false
          type: null
          in: formData
          description: 'A textual description of the error'
      responses:
        200: {  }
      security:
        BackendAuth: [ ]
  '/broker-reports/job-status/{jobId}':
    post:
      tags:
        - broker-reports
      description: 'Update the status of a job (meant to be called by the backend)'
      parameters:
        -
          name: status
          required: false
          type: null
          in: formData
          description: 'The new status of the job'
        -
          name: message
          required: false
          type: null
          in: formData
          description: 'A textual explanation of the status change'
        -
          name: jobId
          required: true
          in: path
          type: string
      responses:
        200: {  }
      security:
        BackendAuth: [ ]
  /exercises:
    get:
      description: 'Get a list of exercises with an optional filter'
      parameters:
        -
          name: search
          required: false
          in: path
          type: string
      responses:
        200:
          $ref: '#/responses/ExerciseListResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - exercises
      security:
        WebToken: [ ]
  '/exercises/{id}':
    get:
      description: 'Get details of an exercise'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200:
          $ref: '#/responses/ExerciseResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - exercises
      security:
        WebToken: [ ]
  /exercise-assignments:
    get:
      tags:
        - assignments
      description: 'Get a list of all assignments'
      parameters: [ ]
      responses:
        200:
          $ref: '#/responses/AssignmentListResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      security:
        WebToken: [ ]
    post:
      tags:
        - assignments
      description: 'Assign an exercise to a group'
      parameters:
        -
          name: exerciseId
          required: false
          type: null
          in: formData
          description: 'Identifier of the exercise'
        -
          name: groupId
          required: false
          type: null
          in: formData
          description: 'Identifier of the group'
      responses:
        200:
          $ref: '#/responses/AssignmentResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      security:
        WebToken: [ ]
  '/exercise-assignments/{id}':
    get:
      tags:
        - assignments
      description: 'Get details of an assignment'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200:
          $ref: '#/responses/AssignmentResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      security:
        WebToken: [ ]
    post:
      tags:
        - assignments
      description: 'Update details of an assignment'
      parameters:
        -
          name: name
          required: false
          type: 'string:2..'
          in: formData
          description: 'Name of the assignment'
        -
          name: isPublic
          required: false
          type: bool
          in: formData
          description: 'Is the assignment ready to be displayed to students?'
        -
          name: description
          required: false
          type: string
          in: formData
          description: 'A description of the assignment'
        -
          name: firstDeadline
          required: false
          type: numericint
          in: formData
          description: 'First deadline for submission of the assignment'
        -
          name: firstMaxPoints
          required: false
          type: numericint
          in: formData
        -
          name: submissionsLimit
          required: false
          type: numericint
          in: formData
        -
          name: scoreConfig
          required: false
          type: string
          in: formData
          description: 'A configuration of the score calculator (the exact format depends on the calculator assigned to the exercise)'
        -
          name: allowSecondDeadline
          required: false
          type: bool
          in: formData
          description: 'Should there be a second deadline for students who didn''t make the first one?'
        -
          name: secondDeadline
          required: false
          type: numericint
          in: formData
          description: 'A second deadline for submission of the assignment (with different point award)'
        -
          name: secondMaxPoints
          required: false
          type: numericint
          in: formData
        -
          name: id
          required: true
          in: path
          type: string
        -
          name: maxPointsBeforeFirstDeadline
          required: false
          type: numericint
          in: formData
          description: 'A maximum of points that can be awarded for a submission before first deadline'
        -
          name: submissionsCountLimit
          required: false
          type: numericint
          in: formData
          description: 'A maximum amount of submissions by a student for the assignment'
        -
          name: maxPointsBeforeSecondDeadline
          required: false
          type: numericint
          in: formData
          description: 'A maximum of points that can be awarded for a late submission'
        -
          name: localizedAssignments
          required: false
          type: null
          in: formData
          description: 'A description of the assignment'
      responses:
        200:
          $ref: '#/responses/AssignmentResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      security:
        WebToken: [ ]
    delete:
      tags:
        - assignments
      description: 'Delete an assignment'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200:
          $ref: '#/responses/SuccessResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      security:
        WebToken: [ ]
  '/exercise-assignments/{id}/can-submit':
    get:
      tags:
        - assignments
      description: 'Check if the current user can submit solutions to the assignment'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200:
          $ref: '#/responses/BooleanResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      security:
        WebToken: [ ]
  '/exercise-assignments/{id}/users/{userId}/submissions':
    get:
      tags:
        - assignments
      description: 'Get a list of submitted solutions of the assignment'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
        -
          name: userId
          required: true
          in: path
          type: string
      responses:
        200: {  }
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      security:
        WebToken: [ ]
  '/exercise-assignments/{id}/submit':
    post:
      tags:
        - assignments
      description: 'Submit a solution of the assignment'
      parameters:
        -
          name: note
          required: false
          type: null
          in: formData
          description: 'A private note by the author of the solution'
        -
          name: files
          required: false
          type: null
          in: formData
          description: 'Submitted files'
        -
          name: id
          required: true
          in: path
          type: string
        -
          name: runtimeConfigurationId
          required: false
          type: null
          in: formData
          description: ''
      responses:
        200: {  }
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      security:
        WebToken: [ ]
  '/exercise-assignments/{id}/limits/{hardwareGroup}':
    get:
      tags:
        - assignments
      description: 'Get a list of resource limits for an assignment and a hardware group'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
        -
          name: hardwareGroup
          required: true
          in: path
          type: string
      responses:
        200: {  }
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      security:
        WebToken: [ ]
    post:
      tags:
        - assignments
      description: 'Set resource limits for an assignment and a hardware group'
      parameters:
        -
          name: limits
          required: false
          type: null
          in: formData
          description: 'A list of resource limits'
        -
          name: id
          required: true
          in: path
          type: string
        -
          name: hardwareGroup
          required: true
          in: path
          type: string
      responses:
        200: {  }
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      security:
        WebToken: [ ]
  /groups:
    get:
      description: 'Get a list of all groups'
      parameters: [ ]
      responses:
        200:
          $ref: '#/responses/GroupListResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - groups
      security:
        WebToken: [ ]
    post:
      description: 'Create a new group'
      parameters:
        -
          name: name
          required: false
          type: 'string:2..'
          in: formData
          description: ''
        -
          name: description
          required: false
          type: null
          in: formData
          description: ''
        -
          name: instanceId
          required: false
          type: 'string:36'
          in: formData
          description: ''
        -
          name: parentGroupId
          required: false
          type: 'string:36'
          in: formData
          description: ''
        -
          name: publicStats
          required: false
          type: bool
          in: formData
          description: ''
      responses:
        200:
          $ref: '#/responses/GroupResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - groups
      security:
        WebToken: [ ]
  /groups/validate-add-group-data:
    post:
      description: 'Validate group creation data'
      parameters:
        -
          name: name
          required: false
          type: null
          in: formData
          description: 'Name of the group'
        -
          name: instanceId
          required: false
          type: null
          in: formData
          description: 'Identifier of the instance where the group belongs'
        -
          name: parentGroupId
          required: false
          type: null
          in: formData
          description: 'Identifier of the parent group'
      responses:
        200: {  }
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - groups
      security:
        WebToken: [ ]
  '/groups/{id}':
    get:
      description: 'Get details of a group'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200: {  }
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - groups
      security:
        WebToken: [ ]
    delete:
      description: 'Delete a group'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200:
          $ref: '#/responses/GroupResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - groups
      security:
        WebToken: [ ]
  '/groups/{id}/subgroups':
    get:
      description: 'Get a list of subgroups of a group'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200:
          $ref: '#/responses/GroupListResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - groups
      security:
        WebToken: [ ]
  '/groups/{id}/members':
    get:
      description: 'Get a list of members of a group'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200:
          $ref: '#/responses/UserListResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - groups
      security:
        WebToken: [ ]
  '/groups/{id}/students':
    get:
      description: 'Get a list of students in a group'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200:
          $ref: '#/responses/UserListResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - groups
      security:
        WebToken: [ ]
  '/groups/{id}/students/stats':
    get:
      description: 'Get statistics of a group'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200: {  }
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - groups
      security:
        WebToken: [ ]
  '/groups/{id}/students/{userId}':
    get:
      description: 'Get statistics of a single student in a group'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
        -
          name: userId
          required: true
          in: path
          type: string
      responses:
        200: {  }
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - groups
      security:
        WebToken: [ ]
    post:
      description: 'Add a student to a group'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
        -
          name: userId
          required: true
          in: path
          type: string
      responses:
        200:
          $ref: '#/responses/GroupResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - groups
      security:
        WebToken: [ ]
    delete:
      description: 'Remove a student from a group'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
        -
          name: userId
          required: true
          in: path
          type: string
      responses:
        200:
          $ref: '#/responses/GroupResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - groups
      security:
        WebToken: [ ]
  '/groups/{id}/students/{userId}/best-results':
    get:
      description: 'Get the best solution of an assignment for a group submitted by a student'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
        -
          name: userId
          required: true
          in: path
          type: string
      responses:
        200: {  }
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - groups
      security:
        WebToken: [ ]
  '/groups/{id}/supervisors':
    get:
      description: 'Get a list of supervisors in a group'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200:
          $ref: '#/responses/UserListResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - groups
      security:
        WebToken: [ ]
  '/groups/{id}/supervisors/{userId}':
    post:
      description: 'Add a supervisor to a group'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
        -
          name: userId
          required: true
          in: path
          type: string
      responses:
        200:
          $ref: '#/responses/GroupResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - groups
      security:
        WebToken: [ ]
    delete:
      description: 'Remove a supervisor from a group'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
        -
          name: userId
          required: true
          in: path
          type: string
      responses:
        200:
          $ref: '#/responses/GroupResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - groups
      security:
        WebToken: [ ]
  '/groups/{id}/admin':
    get:
      description: 'Get identifiers of administrators of a group'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200: {  }
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - groups
      security:
        WebToken: [ ]
    post:
      description: 'Make a user an administrator of a group'
      parameters:
        -
          name: userId
          required: false
          type: null
          in: formData
          description: 'Identifier of a user to be made administrator'
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200:
          $ref: '#/responses/GroupResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - groups
      security:
        WebToken: [ ]
  '/groups/{id}/assignments':
    get:
      description: 'Get all exercise assignments for a group'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200:
          $ref: '#/responses/AssignmentListResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - groups
      security:
        WebToken: [ ]
  /instances:
    get:
      description: 'Get a list of all instances'
      parameters: [ ]
      responses:
        200:
          $ref: '#/responses/InstanceListResponse'
      tags:
        - instances
    post:
      description: 'Create a new instance'
      parameters:
        -
          name: name
          required: false
          type: 'string:2..'
          in: formData
          description: 'Name of the instance'
        -
          name: description
          required: false
          type: null
          in: formData
          description: 'Description of the instance'
        -
          name: isOpen
          required: false
          type: bool
          in: formData
          description: 'Should the instance be open for registration?'
      responses:
        200:
          $ref: '#/responses/InstanceResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - instances
      security:
        WebToken: [ ]
  '/instances/{id}':
    get:
      description: 'Get details of an instance'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200:
          $ref: '#/responses/InstanceResponse'
      tags:
        - instances
    put:
      description: 'Update an instance'
      parameters:
        -
          name: name
          required: false
          type: 'string:2..'
          in: formData
          description: 'Name of the instance'
        -
          name: description
          required: false
          type: null
          in: formData
          description: 'Description of the instance'
        -
          name: isOpen
          required: false
          type: bool
          in: formData
          description: 'Should the instance be open for registration?'
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200:
          $ref: '#/responses/InstanceResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - instances
      security:
        WebToken: [ ]
    delete:
      description: 'Delete an instance'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200: {  }
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - instances
      security:
        WebToken: [ ]
  '/instances/{id}/groups':
    get:
      description: 'Get a list of groups in an instance'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200:
          $ref: '#/responses/GroupListResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - instances
      security:
        WebToken: [ ]
  '/instances/{id}/users':
    get:
      description: 'Get a list of users registered in an instance'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
        -
          name: search
          required: false
          in: path
          type: string
      responses:
        200:
          $ref: '#/responses/UserListResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - instances
      security:
        WebToken: [ ]
  '/instances/{id}/licences':
    get:
      description: 'Get a list of licenses associated with an instance'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200:
          $ref: '#/responses/LicenceListResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - instances
      security:
        WebToken: [ ]
    post:
      description: 'Create a new license for an instance'
      parameters:
        -
          name: note
          required: false
          type: 'string:2..'
          in: formData
          description: 'A note for users or administrators'
        -
          name: validUntil
          required: false
          type: datetime
          in: formData
          description: 'Expiration date of the license'
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200:
          $ref: '#/responses/LicenceResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - instances
      security:
        WebToken: [ ]
  '/instances/{id}/licences/{licenceId}':
    put:
      tags:
        - instances
    delete:
      tags:
        - instances
  '/reference-solutions/{id}':
    get:
      description: 'Get reference solutions for an exercise'
      parameters:
        -
          name: note
          required: false
          type: null
          in: formData
          description: ''
        -
          name: files
          required: false
          type: null
          in: formData
          description: ''
        -
          name: hwGroup
          required: false
          type: string
          in: formData
          description: ''
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200: {  }
      tags:
        - reference-exercise-solutions
  '/reference-solutions/{exerciseId}/evaluate/{id}':
    post:
      description: 'Evaluate reference solutions to an exercise for a hardware group'
      parameters:
        -
          name: hwGroup
          required: false
          type: string
          in: formData
          description: 'Identififer of a hardware group'
        -
          name: exerciseId
          required: true
          in: path
          type: string
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200: {  }
      tags:
        - reference-exercise-solutions
  /submissions:
    get:
      description: 'Get a list of all submissions, ever'
      parameters: [ ]
      responses:
        200: {  }
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - submissions
      security:
        WebToken: [ ]
  '/submissions/{id}':
    get:
      description: 'Get information about the evaluation of a submission'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200: {  }
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - submissions
      security:
        WebToken: [ ]
  /uploaded-files:
    post:
      description: 'Upload a file'
      parameters: [ ]
      responses:
        200: {  }
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - uploaded-files
      security:
        WebToken: [ ]
  '/uploaded-files/{id}':
    get:
      description: 'Get details of a file'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200: {  }
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - uploaded-files
      security:
        WebToken: [ ]
  '/uploaded-files/{id}/download':
    get:
      description: 'Download a file'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200: {  }
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - uploaded-files
      security:
        WebToken: [ ]
  '/uploaded-files/{id}/content':
    get:
      description: 'Get the contents of a file'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200: {  }
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - uploaded-files
      security:
        WebToken: [ ]
  /users:
    get:
      description: 'Get a list of all users'
      parameters: [ ]
      responses:
        200:
          $ref: '#/responses/UserListResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
      tags:
        - users
    post:
      description: 'Create a user account'
      parameters:
        -
          name: email
          required: false
          type: email
          in: formData
          description: 'An email that will serve as a login name'
        -
          name: firstName
          required: false
          type: 'string:2..'
          in: formData
          description: 'First name'
        -
          name: lastName
          required: false
          type: 'string:2..'
          in: formData
          description: 'Last name'
        -
          name: password
          required: false
          type: 'string:1..'
          in: formData
          description: 'A password for authentication'
        -
          name: instanceId
          required: false
          type: 'string:1..'
          in: formData
          description: 'Identifier of the instance to register in'
      responses:
        200:
          $ref: '#/responses/UserResponse'
      tags:
        - users
  /users/ext:
    post:
      description: 'Create an account authenticated with an external service'
      parameters:
        -
          name: username
          required: false
          type: 'string:2..'
          in: formData
          description: 'Login name'
        -
          name: password
          required: false
          type: 'string:1..'
          in: formData
          description: 'Authentication password'
        -
          name: instanceId
          required: false
          type: 'string:1..'
          in: formData
          description: 'Identifier of the instance to register in'
        -
          name: serviceId
          required: false
          type: 'string:1..'
          in: formData
          description: 'Identifier of the authentication service'
      responses:
        200:
          $ref: '#/responses/UserResponse'
      tags:
        - users
  /users/validate-registration-data:
    post:
      description: 'Check if the registered E-mail isn''t already used and if the password is strong enough'
      parameters:
        -
          name: email
          required: false
          type: null
          in: formData
          description: 'E-mail address (login name)'
        -
          name: password
          required: false
          type: null
          in: formData
          description: 'Authentication password'
      responses:
        200: {  }
      tags:
        - users
  '/users/{id}':
    get:
      description: 'Get details of a user account'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200:
          $ref: '#/responses/UserResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - users
      security:
        WebToken: [ ]
  '/users/{id}/groups':
    get:
      description: ''
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200:
          $ref: '#/responses/GroupListResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - users
      security:
        WebToken: [ ]
  '/users/{id}/instances':
    get:
      description: 'Get a list of instances where a user is registered'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200:
          $ref: '#/responses/InstanceListResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - users
      security:
        WebToken: [ ]
  '/users/{id}/exercises':
    get:
      description: 'Get a list of exercises authored by a user'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200:
          $ref: '#/responses/ExerciseListResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - users
      security:
        WebToken: [ ]
  /users/detail:
    post:
      description: 'Update the profile associated with a user account'
      parameters:
        -
          name: email
          required: false
          type: email
          in: formData
          description: 'E-mail address'
        -
          name: firstName
          required: false
          type: 'string:2..'
          in: formData
          description: 'First name'
        -
          name: lastName
          required: false
          type: 'string:2..'
          in: formData
          description: 'Last name'
        -
          name: degreesBeforeName
          required: false
          type: 'string:1..'
          in: formData
          description: 'Degrees before name'
        -
          name: degreesAfterName
          required: false
          type: 'string:1..'
          in: formData
          description: 'Degrees after name'
      responses:
        200:
          $ref: '#/responses/UserResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - users
      security:
        WebToken: [ ]
  /forgotten-password:
    post:
      description: 'Request a password reset (user will receive an e-mail that prompts them to reset their password)'
      parameters:
        -
          name: username
          required: false
          type: 'string:2..'
          in: formData
          description: 'An identifier of the user whose password should be reset'
      responses:
        200: {  }
      tags:
        - forgotten-password
  /forgotten-password/change:
    post:
      description: 'Change the user''s password'
      parameters:
        -
          name: password
          required: false
          type: 'string:2..'
          in: formData
          description: 'The new password'
      responses:
        200:
          $ref: '#/responses/SuccessResponse'
        403:
          $ref: '#/responses/ForbiddenResponse'
        401:
          $ref: '#/responses/UnauthorizedResponse'
      tags:
        - forgotten-password
      security:
        WebToken: [ ]
  /forgotten-password/validate-password-strength:
    post:
      description: 'Check if a password is strong enough'
      parameters:
        -
          name: password
          required: false
          type: null
          in: formData
          description: 'the password to be checked'
      responses:
        200: {  }
      tags:
        - forgotten-password
  '/exercise-assignments/{id}/limits':
    get:
      description: 'Get a list of resource limits for an assignment and a hardware group'
      parameters:
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200: {  }
        401: {  }
        403: {  }
      security:
        WebToken: [ ]
      tags:
        - assignments
    post:
      description: 'Set resource limits for an assignment and a hardware group'
      parameters:
        -
          name: limits
          required: false
          type: null
          in: formData
          description: 'A list of resource limits'
        -
          name: id
          required: true
          in: path
          type: string
      responses:
        200: {  }
        401: {  }
        403: {  }
      security:
        WebToken: [ ]
      tags:
        - assignments
responses:
  BooleanResponse:
    description: 'A boolean value'
    schema:
      allOf:
        -
          $ref: '#/responses/DefaultResponseParams'
        -
          type: object
          properties:
            payload:
              type: boolean
              example: true
  InstanceResponse:
    description: 'An instance object'
    schema:
      allOf:
        -
          $ref: '#/responses/DefaultResponseParams'
        -
          type: object
          properties:
            payload:
              $ref: '#/definitions/Instance'
  InstanceListResponse:
    description: 'A list of assignments'
    schema:
      allOf:
        -
          $ref: '#/responses/DefaultResponseParams'
        -
          type: object
          properties:
            payload:
              type: array
              items:
                $ref: '#/definitions/Instance'
  LicenceResponse:
    description: 'A licence object'
    schema:
      allOf:
        -
          $ref: '#/responses/DefaultResponseParams'
        -
          type: object
          properties:
            payload:
              $ref: '#/definitions/Licence'
  LicenceListResponse:
    description: 'A list of licences'
    schema:
      allOf:
        -
          $ref: '#/responses/DefaultResponseParams'
        -
          type: object
          properties:
            payload:
              type: array
              items:
                $ref: '#/definitions/Licence'
  UserResponse:
    description: 'Details of a user'
    schema:
      allOf:
        -
          $ref: '#/responses/DefaultResponseParams'
        -
          type: object
          properties:
            payload:
              $ref: '#/definitions/User'
  UserListResponse:
    description: 'A list of users'
    schema:
      allOf:
        -
          $ref: '#/responses/DefaultResponseParams'
        -
          type: object
          properties:
            payload:
              type: array
              items:
                $ref: '#/definitions/User'
  GroupResponse:
    description: 'A group object'
    schema:
      allOf:
        -
          $ref: '#/responses/DefaultResponseParams'
        -
          type: object
          properties:
            payload:
              $ref: '#/definitions/Group'
  GroupListResponse:
    description: 'A list of groups'
    schema:
      allOf:
        -
          $ref: '#/responses/DefaultResponseParams'
        -
          type: object
          properties:
            payload:
              type: array
              items:
                $ref: '#/definitions/Group'
  ExerciseResponse:
    description: 'An exercise object'
    schema:
      allOf:
        -
          $ref: '#/responses/DefaultResponseParams'
        -
          type: object
          properties:
            payload:
              $ref: '#/definitions/Exercise'
  ExerciseListResponse:
    description: 'A list of exercises'
    schema:
      allOf:
        -
          $ref: '#/responses/DefaultResponseParams'
        -
          type: object
          properties:
            payload:
              type: array
              items:
                $ref: '#/definitions/Exercise'
  AssignmentListResponse:
    description: 'A list of assignments'
    schema:
      allOf:
        -
          $ref: '#/responses/DefaultResponseParams'
        -
          type: object
          properties:
            payload:
              type: array
              items:
                $ref: '#/definitions/Assignment'
  AssignmentResponse:
    description: 'An assignment object'
    schema:
      allOf:
        -
          $ref: '#/responses/DefaultResponseParams'
        -
          type: object
          properties:
            payload:
              $ref: '#/definitions/Assignment'
  DefaultResponseParams:
    properties:
      code:
        type: integer
        required: true
        example: 200
      success:
        type: boolean
        required: true
        example: true
  SuccessResponse:
    description: Success
    schema:
      type: object
      allOf:
        -
          $ref: '#/responses/DefaultResponseParams'
        -
          type: object
          properties:
            payload:
              type: string
              example: OK
  CreatedResponseParams:
    properties:
      code:
        type: integer
        required: true
        example: 201
      success:
        type: boolean
        required: true
        example: true
  DeleteResponse:
    description: OK
    schema:
      properties:
        code:
          type: integer
          required: true
        success:
          type: boolean
          required: true
        payload:
          type: string
          example: OK
      example:
        code: 200
        success: true
        payload: {  }
  DefaultErrorParams:
    type: object
    allOf:
      -
        $ref: '#/responses/DefaultResponseParams'
      -
        properties:
          msg:
            type: string
            required: true
  UnauthorizedResponse:
    description: 'Login required'
    schema:
      type: object
      allOf:
        -
          $ref: '#/responses/DefaultErrorParams'
      example:
        msg: 'Forbidden Request - Login required'
        code: 401
        success: false
  ForbiddenResponse:
    description: 'Forbidden Request - Access denied'
    schema:
      type: object
      allOf:
        -
          $ref: '#/responses/DefaultErrorParams'
      example:
        msg: 'Forbidden Request - Access denied'
        code: 403
        success: false
  BadRequestResponse:
    description: 'Bad Request'
    schema:
      type: object
      allOf:
        -
          $ref: '#/responses/DefaultErrorParams'
      example:
        msg: 'Bad Request - Missing required POST field'
        code: 400
        success: false
definitions:
  Assignment:
    type: object
    properties:
      id:
        type: string
        format: guid
        example: 0cf3b440-5531-3122-b091-4de13f15652d
      name:
        type: string
        example: 'P ?= NP'
      isPublic:
        type: boolean
        example: true
      description:
        type: string
        example: 'Decide if P equals NP'
      groupId:
        $ref: '#/definitions/Group/properties/id'
      deadline:
        type: object
        properties:
          first:
            type: integer
            example: 1530195253
          second:
            type: integer
            example: 1627097523
      submissionsCountLimit:
        type: integer
        example: 50
      canReceiveSubmissions:
        type: boolean
        example: false
      allowSecondDeadline:
        type: boolean
        example: false
      maxPoints:
        type: object
        properties:
          first:
            type: integer
            example: 0
          second:
            type: integer
            example: 0
      scoreConfig:
        type: string
        example: ''
      localizedAssignments:
        type: array
        items: {  }
      firstDeadline:
        type: integer
        example: 1530200972
      secondDeadline:
        type: integer
        example: 1627103242
      maxPointsBeforeFirstDeadline:
        type: integer
        example: 0
      maxPointsBeforeSecondDeadline:
        type: integer
        example: 0
      solutionRuntimeConfigs:
        type: array
        items: {  }
  Group:
    type: object
    properties:
      id:
        type: string
        format: guid
        example: 6c241f8f-1a0a-34dc-8042-591352a764ea
      name:
        type: string
        example: 'Demo group'
      description:
        type: string
        example: 'A group meant solely for the purpose of demonstration'
      adminId:
        type: string
        format: guid
        example: ed6eef24-6b1f-3781-b9d3-625d82830ec1
      admins:
        type: array
        items:
          type: string
          format: guid
          example: ed6eef24-6b1f-3781-b9d3-625d82830ec1
      supervisors:
        type: array
        items:
          type: string
          format: guid
          example: ed6eef24-6b1f-3781-b9d3-625d82830ec1
      students:
        type: array
        items:
          type: string
          format: guid
          example: c07d10d7-333f-327a-ab32-201209127b7a
      instanceId:
        type: string
        format: guid
        example: ea2debaa-dd19-3e79-ad09-5e4831a94be4
      hasValidLicence:
        type: boolean
        example: true
      parentGroupId:
        type: string
        format: guid
        example: null
      childGroups:
        type: array
        items: {  }
      assignments:
        type: array
        items:
          type: string
          format: guid
          example: 0cf3b440-5531-3122-b091-4de13f15652d
      publicStats:
        type: boolean
        example: true
  Instance:
    type: object
    properties:
      id:
        type: string
        format: guid
        example: ea2debaa-dd19-3e79-ad09-5e4831a94be4
      name:
        type: string
        example: 'Frankenstein University, Atlantida'
      description:
        type: string
        example: 'First underwater IT university for fish and shrimps.'
      hasValidLicence:
        type: boolean
        example: true
      isOpen:
        type: boolean
        example: true
      createdAt:
        type: integer
        format: int64
        description: 'UNIX timestamp'
        example: 1478123694
      updatedAt:
        type: integer
        format: int64
        description: 'UNIX timestamp'
        example: 1478123694
      isAllowed:
        type: boolean
        example: true
      admin:
        type: string
        format: guid
        example: null
      topLevelGroups:
        type: array
        items:
          type: string
          example: 6c241f8f-1a0a-34dc-8042-591352a764ea
  Licence:
    type: object
    properties:
      id:
        type: string
        format: guid
        example: d620463d-3ea8-3d3d-b65a-3830529ddeb5
      note:
        type: string
        example: 'Year licence for the first Fish University'
      isValid:
        type: boolean
        example: true
      validUntil:
        type: integer
        format: int64
        description: 'UNIX timestamp'
        example: 1605764997
  User:
    type: object
    properties:
      id:
        type: string
        format: guid
        example: ed6eef24-6b1f-3781-b9d3-625d82830ec1
      fullName:
        type: string
        example: 'Zora Steuber'
      name:
        type: object
        properties:
          degreesBeforeName:
            type: string
            example: ''
          firstName:
            type: string
            example: Zora
          lastName:
            type: string
            example: Steuber
          degreesAfterName:
            type: string
            example: ''
      instanceId:
        type: string
        format: guid
        example: ea2debaa-dd19-3e79-ad09-5e4831a94be4
      avatarUrl:
        type: string
        example: 'https://secure.gravatar.com/avatar/543bccf838d0f210906f5fc963c90e4e.png?s=200&amp;d=retro&amp;r=g'
      isVerified:
        description: 'Is the user verified by email?'
        type: boolean
        example: false
      role:
        type: string
        format: guid
        example: 2908b74a-e051-360f-bd62-b5e703116218
      groups:
        type: object
        properties:
          studentOf:
            type: array
            items:
              type: string
              example: 6c241f8f-1a0a-34dc-8042-591352a764ea
          supervisorOf:
            type: array
            items:
              type: string
              example: 6c241f8f-1a0a-34dc-8042-591352a764ea
  Exercise:
    type: object
    properties:
      id:
        type: string
        format: guid
        example: 8a7b76a1-5f0c-31ff-a93a-ca478598682b
      name:
        type: string
        example: 'P ?= NP'
      version:
        type: integer
        example: 2
      authorId:
        type: string
        format: guid
        example: ed6eef24-6b1f-3781-b9d3-625d82830ec1
      forkedFrom:
        type: 'NULL'
        example: null
      description:
        type: string
        example: 'It''s time to crack this one already'
      assignment:
        type: string
        example: 'Decide if P equals NP'
      difficulty:
        type: string
        example: moderate
      createdAt:
        type: object
        properties:
          date:
            type: string
            example: '2016-11-02 22:54:54.000000'
          timezone_type:
            type: integer
            example: 3
          timezone:
            type: string
            example: Europe/Prague
      updatedAt:
        type: object
        properties:
          date:
            type: string
            example: '2016-11-02 22:54:54.000000'
          timezone_type:
            type: integer
            example: 3
          timezone:
            type: string
            example: Europe/Prague
      localizedAssignments:
        type: array
        items: {  }
      solutionRuntimeConfigs:
        type: array
        items: {  }
  Role:
    type: string
    example: 2908b74a-e051-360f-bd62-b5e703116218
  Resource:
    type: string
    example: 695ecef7-526e-301e-86cb-bd33b16a22b2
  Permission:
    type: object
    properties:
      role:
        type: string
        format: guid
        example: 1c3cb532-cf00-3c22-acfd-20f75d3c64fd
      resource:
        type: string
        format: guid
        example: 339e3a66-59a3-33a3-af86-80a60ca04a36
      action:
        type: string
        example: update
      isAllowed:
        type: integer
        example: 1
